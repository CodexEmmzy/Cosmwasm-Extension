{
  "Instantiate": {
    "prefix": ["instantiate"],
    "body": [
      "// Conditional attribute for the entry point.",
      "// This attribute controls whether this function will be used as the contract's entry point when the contract is not compiled as a library.",
      "#[cfg_attr(not(feature = \"library\"), entry_point)]",

      "//  Define the `instantiate` function.",
      "//  This function is called when the contract is initialized.",
      "pub fn instantiate(",
      "    deps: DepsMut, // Dependencies for mutable access to the contract's state.",
      "    _env: Env, // Environment data, like block height and time.",
      "    _info: MessageInfo, // Information about the contract's initialization.",
      "    _msg: ${1:InstantiateMsg}, // Placeholder for the contract's initialization message.",
      ") -> Result<Response, ${2:ContractError}> { // Result type with Response and ContractError.",
      "    $0 ; // Cursor position.",

      "//  Create a mutable Response to build the contract's response.",
      "    let mut res = Response::new();",

      "//  Return a successful response indicating that the contract was successfully initialized.",
      "    Ok(res)",
      "}"
    ],
    "description": "A Snippet that provides an Instantiate entry point in Cosmwasm"
  },

  "Query": {
    "prefix": "query",
    "body": [
      "// Define the `query` function.\n// This function handles queries to the contract's state.",
      "pub fn query(deps: Deps, _env: Env, msg: ${1:QueryMsg}) -> StdResult<Binary> {",

      "// Import necessary items from the QueryMsg module.\nuse ${1:QueryMsg}::*;",

      "// Match the query message to execute the appropriate logic.",
      "    match msg {",
      "        $0",
      "    }",
      "    ",
      "}"
    ],
    "description": "A Snippet that provides a Query entry point in Cosmwasm"
  },

  "Execute": {
    "prefix": "execute",
    "body": [
      "// Define the `execute` function.",
      "// This function handles the execution of messages sent to the contract.",
      "pub fn execute(",
      "    deps: DepsMut, // Dependencies for mutable access to the contract's state.",
      "    _env: Env, // Environment data, like block height and time.",
      "    info: MessageInfo, // Information about the message sender.",
      "    msg: ${1:ExecuteMsg}, // Placeholder for the execution message.",
      ") -> Result<Response, ${2:ContractError}> { // Result type with Response and ContractError.",

      "// Import necessary items from the ExecuteMsg module.",
      "    use ${1:ExecuteMsg}::*;",

      "// Match the execution message to execute the appropriate logic.",
      "    match msg {",
      "        $0",
      "    }",
      "}",
      ""
    ],
    "description": "A Snippet that provides an Execute entry point in Cosmwasm"
  },

  "Handle Message": {
    "prefix": ["handle"],
    "body": [
      "// Conditional attribute for the entry point.",
      "// This attribute controls whether this function will be used as the contract's entry point when the contract is not compiled as a library.",
      "#[cfg_attr(not(feature = \"library\"), entry_point)]",

      "// Define the `handle` function.",
      "// This function is called when the contract receives and handles a message.",
      "pub fn handle(",
      "    deps: DepsMut, // Dependencies for mutable access to the contract's state.",
      "    _env: Env, // Environment data, like block height and time.",
      "    _info: MessageInfo, // Information about the incoming message sender.",
      "    _msg: ${1:HandleMsg}, // Placeholder for the message being handled.",
      ") -> Result<Response, ${2:ContractError}> { // Result type with Response and ContractError.",

      "// Cursor position.",
      "    $3 ;",

      "// Create a mutable Response to build the contract's response.",
      "    let mut res = Response::new();",

      "// Return a successful response indicating that the message was successfully handled.",
      "    Ok(res)",
      "}"
    ],
    "description": "A Snippet that provides a Handle Message entry point in Cosmwasm"
  },

  "Store Data": {
    "prefix": ["store_data"],
    "body": [
      "// Define the `store_data` function.",
      "// This function is used to store data in the contract's storage.",
      "pub fn store_data(deps: DepsMut, // Dependencies for mutable access to the contract's state.",
      "                  _env: Env, // Environment data, like block height and time.",
      "                  _info: MessageInfo, // Information about the message sender (not used in this function).",
      "                  data: Vec<u8> // The data to be stored in the contract's storage.",
      ") -> StdResult<()> { // Result type indicating success or failure.",

      "// Use the dependencies to set the data in the contract's storage.",
      "    deps.storage.set(b\"data\", &data);",

      "// Return a successful result indicating that the data was stored successfully.",
      "    Ok(())",
      "}"
    ],
    "description": "A Snippet that stores data in Cosmwasm contract storage"
  },

  "Read Data": {
    "prefix": ["read_data"],
    "body": [
      "// Define the `read_data` function.",
      "// This function is used to read data from the contract's storage.",
      "pub fn read_data(deps: Deps, // Dependencies for read-only access to the contract's state.",
      "                 _env: Env // Environment data, like block height and time (not used in this function).",
      ") -> QueryResult<Vec<u8>> { // Result type indicating success or failure.",

      "// Use the dependencies to get the data from the contract's storage.",
      "    let data = deps.storage.get(b\"data\");",

      "// Return the data if it exists, or an empty Vec<u8> if it doesn't.",
      "    Ok(data.unwrap_or_default())",
      "}"
    ],
    "description": "A Snippet that reads data from Cosmwasm contract storage",
  },

  "Emit Event": {
    "prefix": ["emit_event"],
    "body": [
      "// Define the `emit_event` function.",
      "// This function is used to emit an event in the contract.",
      "pub fn emit_event(deps: DepsMut, // Dependencies for mutable access to the contract's state.",
      "                 _env: Env,    // Environment data, like block height and time (not used in this function).",
      "                 _info: MessageInfo, // Information about the message that triggered the event (not used in this function).",
      "                 event_type: &str,  // Type of the event.",
      "                 attributes: Vec<(String, String)>) // Attributes associated with the event.",
      "    -> StdResult<Response> { // Result type indicating success or failure.",

      "// Create a new Response and add the provided attributes to it.",
      "    let response = Response::new().add_attributes(attributes);",

      "// Push the event to the contract's event list with the specified event type and attributes.",
      "    deps.events.push(event_type.into(), response.attributes);",

      "// Return the response, indicating that the event was successfully emitted.",
      "    Ok(response)",
      "}"
    ],
    "description": "A Snippet that emits an event in a Cosmwasm contract",
  },

  "Send Tokens": {
    "prefix": ["send_tokens"],
    "body": [
      "// Define the `send_tokens` function.",
      "// This function is used to send tokens to a recipient in the contract.",
      "pub fn send_tokens(deps: DepsMut, // Dependencies for mutable access to the contract's state.",
      "                  _env: Env,    // Environment data, like block height and time (not used in this function).",
      "                  info: MessageInfo, // Information about the message that triggers the token transfer.",
      "                  recipient: Addr,   // Recipient's address.",
      "                  amount: Coin)     // Amount of tokens to send.",
      "    -> StdResult<Response> { // Result type indicating success or failure.",

      "// Create a BankMsg for sending tokens to the recipient.",
      "    let transfer_msg = BankMsg::Send {",
      "        to_address: recipient.to_string(), // Convert recipient's address to a string.",
      "        amount: vec![amount], // Wrap the amount in a vector.",
      "    };",

      "// Create a new Response containing the transfer message.",
      "    Ok(Response::new().add_message(transfer_msg))",
      "}"
    ],
    "description": "A Snippet that sends tokens in a Cosmwasm contract",
  },

  "Condition Check": {
    "prefix": ["perform_condition_check"],
    "body": [
      "// Define the `perform_condition_check` function.",
      "// This function is used to perform a conditional check in the contract.",
      "pub fn perform_condition_check(deps: Deps, // Dependencies for read-only access to the contract's state.",
      "                               env: Env,   // Environment data, like block height and time.",
      "                               _info: MessageInfo) // Information about the triggering message (not used here).",
      "    -> StdResult<()> { // Result type indicating success or failure.",

      "// Check if the current block's time is greater than a specified timestamp.",
      "    if env.block.time.seconds() > ${1:timestamp} { // Use the provided timestamp as the threshold.",
      "        Ok(()) // If the condition is met, return success.",
      "    } else {",
      "// If the condition is not met, return a generic error with a custom message.",
      "        Err(StdError::GenericErr {",
      "            msg: \"Condition not met\".to_string(),",
      "        })",
      "    }",
      "}"
    ],
    "description": "A Snippet that performs a conditional check in a Cosmwasm contract",
  },

  "Query Balance": {
    "prefix": ["query_balance"],
    "body": [
      "// Define the `query_balance` function.",
      "// This function is used to query the balance of an account in the contract.",
      "pub fn query_balance(deps: Deps,  // Dependencies for read-only access to the contract's state.",
      "                     _env: Env,   // Environment data (not used here).",
      "                     address: Addr,  // The address for which to query the balance.",
      "                     denom: &str) // The denomination of the balance to query.",
      "    -> QueryResult<Coin> { // Result type indicating success or failure, with a Coin as the result.",

      "// Create a BankQuery for querying the balance of the specified address and denomination.",
      "    let query = BankQuery::Balance {",
      "        address: address.to_string(),",
      "        denom: denom.to_string(),",
      "    };",

      "// Use the querier to execute the query and return the result as a QueryResult<Coin>.",
      "    deps.querier.query(&QueryRequest::BankQuery(query))",
      "}"
    ],
    "description": "A Snippet that queries an account balance in a Cosmwasm contract",
  },

  "Custom Error": {
    "prefix": ["custom_error_example"],
    "body": [
      "// Define the `custom_error_example` function.",
      "// This function demonstrates custom error handling in a Cosmwasm contract.",
      "pub fn custom_error_example(deps: Deps, // Dependencies for read-only access to the contract's state.",
      "                            _env: Env,  // Environment data (not used here).",
      "                            _info: MessageInfo) // Information about the contract's execution (not used here).",
      "    -> StdResult<()> { // Result type indicating success or failure without a specific result value.",

      "// Check a condition (replace `${1:some_condition}` with an actual condition).",
      "    if ${1:some_condition} {",

      "// If the condition is met, return a custom unauthorized error with no backtrace.",
      "        Err(StdError::Unauthorized { backtrace: None })",
      "    } else {",

      "// If the condition is not met, return success (Ok()).",
      "        Ok(())",
      "    }",
      "}"
    ],
    "description": "A Snippet that demonstrates custom error handling in a Cosmwasm contract",
  },

  "Simple Storage": {
    "prefix": ["simple_storage"],
    "body": [
      "// Conditional attribute for the entry point.",
      "// This attribute controls whether this function will be used as the contract's entry point when the contract is not compiled as a library.",
      "#[cfg_attr(not(feature = \"library\"), entry_point)]",

      "// Define the `instantiate` function.",
      "// This function is called when the contract is initialized.",
      "pub fn instantiate(",
      "    deps: DepsMut, // Dependencies for mutable access to the contract's state.",
      "    _env: Env,     // Environment data, like block height and time (not used here).",
      "    _info: MessageInfo, // Information about the contract's initialization (not used here).",
      "    _msg: ${1:InstantiateMsg}, // Placeholder for the contract's initialization message (not used here).",
      ") -> Result<Response, ${2:ContractError}> { // Result type with Response and ContractError.",

      "// Create initial data to store in contract storage.",
      "    let data = b\"Hello, CosmWasm!\";",

      "// Store the data in contract storage under the key 'data'.",
      "    deps.storage.set(b\"data\", data);",

      "// Create a new Response to build the contract's response.",
      "    let res = Response::new();",

      "// Return a successful response indicating that the contract was successfully initialized.",
      "    Ok(res)",
      "}"
    ],
    "description": "A simple Instantiate entry point that stores data in Cosmwasm contract storage",
  },

  "Transfer Tokens": {
    "prefix": ["transfer_tokens"],
    "body": [
      "// Conditional attribute for the entry point.",
      "// This attribute controls whether this function will be used as the contract's entry point when the contract is not compiled as a library.",
      "#[cfg_attr(not(feature = \"library\"), entry_point)]",

      "// Define the `transfer_tokens` function.",
      "// This function is called to transfer tokens to a recipient.",
      "pub fn transfer_tokens(",
      "    deps: DepsMut, // Dependencies for mutable access to the contract's state.",
      "    _env: Env,     // Environment data, like block height and time (not used here).",
      "    _info: MessageInfo, // Information about the message sender (not used here).",
      "    recipient: Addr,    // The recipient's address.",
      "    amount: Uint128,    // The amount of tokens to transfer.",
      ") -> StdResult<Response> {",

      "// Create a BankMsg to send tokens to the recipient.",
      "    let msg = BankMsg::Send {",
      "        to_address: recipient.to_string(),",
      "        amount: coins(amount.u128(), \"uatom\"),",
      "    };",

      "// Create a new Response and add the transfer message to it.",
      "    Ok(Response::new().add_message(msg))",
      "}"
    ],
    "description": "A simple entry point that transfers tokens to a recipient in a Cosmwasm contract",
  },

  "Increment Counter": {
    "prefix": ["increment_counter"],
    "body": [
      "// Conditional attribute for the entry point.",
      "// This attribute controls whether this function will be used as the contract's entry point when the contract is not compiled as a library.",
      "#[cfg_attr(not(feature = \"library\"), entry_point)]",

      "// Define the `increment_counter` function.",
      "// This function is called to increment a counter in the contract's storage.",
      "pub fn increment_counter(",
      "    deps: DepsMut,   // Dependencies for mutable access to the contract's state.",
      "    _env: Env,       // Environment data, like block height and time (not used here).",
      "    _info: MessageInfo, // Information about the message sender (not used here).",
      ") -> StdResult<Response> {",

      "// Initialize a counter in storage with a default value of 0.",
      "    let mut counter = storage::Uint128::from(0);",

      "// Increment the counter by 1.",
      "    counter += Uint128(1);",

      "// Store the updated counter in contract storage.",
      "    deps.storage.set(COUNTER_KEY, &counter);",

      "// Create a new Response indicating the operation was successful.",
      "    Ok(Response::new())",
      "}"
    ],
    "description": "A simple entry point that increments a counter in a Cosmwasm contract",
  },

  "Test Instantiate": {
    "prefix": ["test_instantiate"],
    "body": [
      "// Conditional attribute for the test module.",
      "#[cfg(test)]",

      "// Define the test module for the contract.",
      "mod tests {",

      "// Import necessary testing dependencies.",
      "use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info};",
      "use crate::{instantiate, ContractMsg, ContractResponse};",

      "// Define a test case for the Instantiate function.",
      "#[test]",
      "fn test_instantiate() {",

      "// Create mock dependencies for testing.",
      "let mut deps = mock_dependencies(&[]);",

      "// Create a mock environment for testing.",
      "let env = mock_env();",

      "// Create mock information for testing.",
      "let info = mock_info(\"creator\", &[]);",

      "// Define the message used for initialization (customize as needed).",
      "let msg = InstantiateMsg { /* Initialize your msg */ };",

      "// Call the instantiate function and unwrap the result.",
      "let res = instantiate(deps.as_mut(), env, info, msg).unwrap();",

      "// Assert that no messages or attributes are emitted in this test case.",
      "assert_eq!(0, res.messages.len());",
      "assert_eq!(0, res.attributes.len());",
      "    }",
      "}"
    ],
    "description": "A test case for the Instantiate entry point in a Cosmwasm contract",
  },

  "Test Handle Message": {
    "prefix": ["test_handle"],
    "body": [
      "// Conditional attribute for the test module.",
      "#[cfg(test)]",

      "// Define the test module for the contract.",
      "mod tests {",

      "// Import necessary testing dependencies.",
      "use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info};",
      "use crate::{handle, ContractMsg, ContractResponse};",

      "// Define a test case for the Handle Message function.",
      "#[test]",
      "fn test_handle_message() {",

      "// Create mock dependencies for testing.",
      "let mut deps = mock_dependencies(&[]);",

      "// Create a mock environment for testing.",
      "let env = mock_env();",

      "// Create mock information for testing.",
      "let info = mock_info(\"sender\", &[]);",

      "// Define the message used for handling (customize as needed).",
      "let msg = HandleMsg::Example { /* Initialize your msg */ };",

      "// Call the handle function and unwrap the result.",
      "let res = handle(deps.as_mut(), env, info, msg).unwrap();",

      "// Assert that no messages or attributes are emitted in this test case.",
      "assert_eq!(0, res.messages.len());",
      "assert_eq!(0, res.attributes.len());",
      "    }",
      "}"
    ],
    "description": "A test case for the Handle Message entry point in a Cosmwasm contract",
  },

  "Test Query": {
    "prefix": ["test_query"],
    "body": [
      "// Conditional attribute for the test module.",
      "#[cfg(test)]",

      "// Define the test module for the contract.",
      "mod tests {",

      "// Import necessary testing dependencies.",
      "use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info};",
      "use crate::{query, ContractMsg, ContractResponse};",

      "// Define a test case for the Query function.",
      "#[test]",
      "fn test_query() {",

      "// Create mock dependencies for testing.",
      "let mut deps = mock_dependencies(&[]);",

      "// Create a mock environment for testing.",
      "let env = mock_env();",

      "// Create mock information for testing.",
      "let info = mock_info(\"querier\", &[]);",

      "// Define the message used for querying (customize as needed).",
      "let msg = QueryMsg::Example { /* Initialize your msg */ };",

      "// Call the query function and unwrap the result (customize assertions based on your query response).",
      "let res = query(deps.as_ref(), env, msg).unwrap();",
      "// Add assertions based on your query response.",

      "    }",
      "}"
    ],
    "description": "A test case for the Query entry point in a Cosmwasm contract",
  },

  "Test Storage and State": {
    "prefix": ["test_storage_state"],
    "body": [
      "#[cfg(test)]",
      "mod tests {",
      "    use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info};",
      "    use crate::{handle, ContractMsg, ContractResponse};",
      "    use cosmwasm_std::{Binary, from_slice, to_vec};",
      "",
      "    #[test]",
      "    fn test_storage_and_state_changes() {",
      "        let mut deps = mock_dependencies(&[]);",
      "        let env = mock_env();",
      "        let info = mock_info(\"sender\", &[]);",
      "        let msg = HandleMsg::SetValue { value: 42 };",
      "        let res = handle(deps.as_mut(), env, info, msg).unwrap();",
      "",
      "        // Check if storage value is updated",
      "        let stored_data = deps.storage.get(b\"data\");",
      "        let stored_value: u64 = from_slice(&stored_data.unwrap()).unwrap();",
      "        assert_eq!(42, stored_value);",
      "",
      "        // Check if the response is as expected",
      "        let expected_response = ContractResponse::SetValueResponse { /* Initialize expected response fields */ };",
      "        assert_eq!(expected_response, res);",
      "    }",
      "}"
    ],
    "description": "A test case for checking storage and state changes in a Cosmwasm contract"
  }
}
